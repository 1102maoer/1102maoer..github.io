<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MySQL</title>
      <link href="2021/03/18/mysql/"/>
      <url>2021/03/18/mysql/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="MySQL常用命令"><a href="#MySQL常用命令" class="headerlink" title="MySQL常用命令"></a>MySQL常用命令</h1><p>查看所有的数据仓库：show databases;</p><p>切换要使用的数据仓库：use 数据库名;</p><p>推出MySQL: exit;</p><p>登录：mysql -u 用户名 -p 密码;</p><h1 id="表的设计："><a href="#表的设计：" class="headerlink" title="表的设计："></a>表的设计：</h1><p>设计原则：建议设计的表尽量遵守三大范式</p><p>数据库范式：数据库设计的时候需要遵守的规范，规则。</p><p>一般情况下数据库的设计只需要遵循前3范式即可</p><h2 id="第一范式："><a href="#第一范式：" class="headerlink" title="第一范式："></a>第一范式：</h2><p>确保每个字段的原子性，要求表的每个字段必须是不可分隔的独立单元</p><pre><code>学生：姓名或者英文名  ----违反第一范式       路西|lucy正确做法：    姓名    英文名</code></pre><h2 id="第二范式："><a href="#第二范式：" class="headerlink" title="第二范式："></a>第二范式：</h2><p>在第一范式的基础上，要求每张表只描述一件事情。表的每个字段都和表的主键有依赖。</p><p>表的主键：主键是用来唯一的标识表中一条数据的属性组。</p><pre><code>学生和课程    学号 姓名 年龄 性别 课程编号 课程名称正确做法：    学生表：        学号 姓名 年龄 性别     课程表：        课程编号 课程名称</code></pre><h2 id="第三范式："><a href="#第三范式：" class="headerlink" title="第三范式："></a>第三范式：</h2><p>在第二范式基础，要求每张表的主键之外的其他字段都直接依赖主键，不能有间接的依赖。</p><pre><code>学生表：    学号 姓名 年龄 性别 课程编号课程表：    课程编号 课程名称</code></pre><h1 id="数据库表的完整性约束："><a href="#数据库表的完整性约束：" class="headerlink" title="数据库表的完整性约束："></a>数据库表的完整性约束：</h1><p>约束是为了保证表中数据的正确性和完整性.<br>完整性约束是为了表的数据的正确性！如果数据不正确，那么一开始就不能添加到表中。</p><p>六大约束：CONSTRAINT</p><h2 id="主键约束：PRIMARY-KEY"><a href="#主键约束：PRIMARY-KEY" class="headerlink" title="主键约束：PRIMARY KEY"></a>主键约束：PRIMARY KEY</h2><p>主键：用来唯一的标识表中一条数据的属性组<br>            主键可以是一个单独的列，也可以是多个列的组合<br>            大部分时候我们是定义一个单独的列作为主键列，列名一般叫XXID</p><p>当我们给一个列添加了主键约束，那么这一列的值就必须是非空并且唯一的</p><pre><code>CREATE TABLE T_STU(    SNUM INT PRIMARY KEY    -- 给学号列添加主键约束 snum列的值将不能为空并且 不能重复);</code></pre><h2 id="非空约束：not-null"><a href="#非空约束：not-null" class="headerlink" title="非空约束：not null"></a>非空约束：not null</h2><p>给一个列添加了非空约束，就是规定这一列的值不能为空</p><pre><code>CREATE TABLE T_STU(    SNUM INT PRIMARY KEY,    -- 给学号列添加主键约束 snum列的值将不能为空并且 不能重复    SNAME VARCHAR(25) NOT NULL    -- 添加非空约束 sname列的值不能为空);</code></pre><h2 id="唯一约束：UNIQUE"><a href="#唯一约束：UNIQUE" class="headerlink" title="唯一约束：UNIQUE"></a>唯一约束：UNIQUE</h2><p>给一个列添加唯一约束，就是规定这一列的值唯一不可重复</p><pre><code>CREATE TABLE T_STU(    SNUM INT PRIMARY KEY,    -- 给学号列添加主键约束 snum列的值将不能为空并且 不能重复    SNAME VARCHAR(25) NOT NULL,    -- 添加非空约束 sname列的值不能为空    PHONE CHAR(11) UNIQUE    -- 添加唯一约束  phone列的值不能重复，可以为空);</code></pre><h2 id="默认值：DEFAULT"><a href="#默认值：DEFAULT" class="headerlink" title="默认值：DEFAULT"></a>默认值：DEFAULT</h2><p>用来在添加一条数据又没有给列指定值的时候，列就使用默认值</p><pre><code>CREATE TABLE T_STU(    SNUM INT PRIMARY KEY,    -- 给学号列添加主键约束 snum列的值将不能为空并且 不能重复    SNAME VARCHAR(25) NOT NULL,    -- 添加非空约束 sname列的值不能为空    PHONE CHAR(11) UNIQUE    -- 添加唯一约束  phone列的值不能重复，可以为空    SEX CHAR(1) DEFAULT &#39;男&#39;);sex char(1) default &#39;男&#39; --这是给sex添加默认值也就是如果添加一条学生数据，没有指定性别，性别默认就是男，如果指定了，指定的是什么就是什么</code></pre><h2 id="外键约束：FOREIGN-KEY"><a href="#外键约束：FOREIGN-KEY" class="headerlink" title="外键约束：FOREIGN KEY"></a>外键约束：FOREIGN KEY</h2><p>外键用来表示表与表的关联关系的<br>外键必须关联到其他表的主键列**<strong>**</strong><br>给一个列上添加外键约束，添加的时候会指定外键列关联到是哪张表的那个列<br>添加了外键约束后，外键列的值必须来源于关联表的关联列，而不能是其他值，但是可以为空</p><pre><code>CONSTRAINT 外键约束名字 FOREIGN KEY(外键列列名) REFERENCES 父表名（父表中主键列列名）；</code></pre><p>如果父表中的数据删除时，子表中的数据处理：</p><p>默认是子表中有数据关联父表时，父表中的数据不能删除<br>常用的设置：</p><p>NO ACTION :</p><p>当删除父表数据时，子表中没有动作<br>有关数据的时候父表中的数据删除不掉</p><p>SET NULL:</p><p>当删除父表数据的时候，子表中关联列的值设置为空</p><p>CASCADE:</p><p>设置级联删除<br>当删除父表数据的时候，子表中关联的数据也同时删除</p><h2 id="检查约束—-MySQL不支持"><a href="#检查约束—-MySQL不支持" class="headerlink" title="检查约束—-MySQL不支持"></a>检查约束—-MySQL不支持</h2><p>check(age&gt;6 and age&lt;20)</p><h2 id="主键补充—主键自增："><a href="#主键补充—主键自增：" class="headerlink" title="主键补充—主键自增："></a>主键补充—主键自增：</h2><p>主键约束—保证主键列的值非空并且唯一</p><p>当我们往表中插入数据的时候，保证主键值不能重复还是有点麻烦的</p><p>mysql数据库中提供了主键自增功能</p><p>当添加一条数据的时候，可以不用指定主键的值，mysql数据库会自动的生成主键的值，生成的值其实就是原来的主键最大值+1</p><p>建表的时候可以在添加主键约束的时候指定主键值自动增长</p><pre><code>列名 数据类型 primary key AUTO_INCREMENT;注意：主键列的类型必须是整数型才能自增oracle数据库是没有主键自增，保证主键值不重复---序列</code></pre><h2 id="表和表之间的关联关系："><a href="#表和表之间的关联关系：" class="headerlink" title="表和表之间的关联关系："></a>表和表之间的关联关系：</h2><p>一对一：人和身份证<br>    一个人只会对应一张身份证<br>    一个身份证只对应一个人</p><p>​    表示一对一的关系时，可以在两张表的任意的表中设置外键</p><p>​    一对一的表设计：<br>​    如果内容基本上都是需要操作，也可以将两表合成一张表<br>​    如果说经常需要用到某一项的单独信息，建议分成两张表，两张表之间可以使用外键关联</p><p>一对多/多对一：<br>    学生和班级<br>    一个学生只能对应一个班级<br>    一个班级可以有多个学生</p><p>​    一对多的表设计：<br>​        一般是在多方添加外键，关联到一方的主键</p><pre><code>    学生表：​        学号 姓名 年龄 班号​    班级表：​        班号 班级名称    </code></pre><p>​        </p><p>多对多：<br>    学生和课程<br>    一个学生可以学习多门课程<br>    一门课程可以有多个学生学习</p><p>​    多对多关系的表设计：使用一个中间表</p><p>​    </p><pre><code>学生表：        学号 姓名 年龄         1001        1002        1003    课程表：        课程编号 课程编程        001        002    中间表 学生-课程:        stu_course        学号 课程号 成绩        1001  001        1001  002        1002  002        1002  003</code></pre><h1 id="SQL语句"><a href="#SQL语句" class="headerlink" title="SQL语句"></a>SQL语句</h1><p>登录数据库服务器后，要操作数据库中的数据，要使用SQL语句。</p><p>SQL:   SQL（Structured Query Language）是“结构化查询语言”，它是对关系型数据库的操作语言。它可以应用到所有关系型数据库中，例如：MySQL、Oracle、SQL Server等。</p><p>语法要求:</p><p>SQL语句可以单行或多行书写，以分号结尾；<br>可以用空格和缩进来来增强语句的可读性；<br>关键字不区别大小写，建议使用大写；</p><p>SQL分类：</p><h2 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h2><p>（Data Definition Language）：数据定义语言，用来定义数据库对象：库、表、列等；</p><p>主要用在建表 删表 建库 删库</p><p>create……</p><p>drop……</p><p>创建数据仓库：CREATE DATABASE 数据库名 DEFAULT CHARACTER SET 字符集；</p><p>修改数据库编码：ALTER DATABASE 数据库名 CHARACTER SET utf8;</p><p>切换数据仓库使用： USE 数据库名；</p><p>删除数据仓库：DROP DATABASE 数据库名；</p><pre><code>CREATE DATABASE TEXT DEFAULT CHARACTER SET utf8;-- 创建SHOW DABABASES;-- 展示数据仓库USE TEXT;-- 使用SHOW TABLES;-- 展示表DROP DATABASE TEXT;-- 删除数据仓库</code></pre><p>对表结构进行操作：</p><pre><code>创建表： CREATE TABLE 表名（-- 在小括号中指定表中有哪些列以及每个列的类型​                    列名 数据类型  约束​             ）;表名和列名的命名规则：和java的标识符的命名规则相似</code></pre><p>数据类型：常用的：<br>整型：int<br>字符串：<br>char:固定长度字符串类型。char(4)，当数据长度为2时，会在后面添加2个空格补位。<br>varchar:固定长度字符串类型。char(4)，当数据长度为2时，会在后面添加2个空格补位。<br>一般对于长度固定的字段使用char,比如性别，手机号，身份证号<br>一般长度不定的字符串字段使用varchar,比如姓名，地址。。。</p><p>浮点数：double    decimal</p><p>布尔型:boolean</p><p>日期：<br>date    yyyy-mm-dd<br>datetim</p><p>修改表结构：</p><pre><code>添加字段：ALTER TABLE 表名 ADD COLUMN 列名 数据类型；删除字段：ALTER TABLE 表名 DROP COLUMN 列名；修改字段类型：ALTER TABLE 表名 MODIFY COLUMN 列名 数据类型；修改字段名称：ALTER TABLE 表名 CHANGE COLUMN 原列名 新列名 数据类型；修改表名称：ALTER TABLE 表名 RENAME TO 新的表名；删除表：DROP TABLOR 表名；删除表结构的时候表中的数据同时删除。</code></pre><h2 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h2><p>（Data Manipulation Language）：数据操作语言，用来定义数据库记录（数据）；</p><p>主要用在对表中数据的增删改操作</p><p>insert….</p><p>插入数据：</p><pre><code>给指定列指定值：INSERT INTO 表名（列名1，列名2...）VALUES (值1，值2)；向表中添加一条数据给表中所有的列都指定值：INSERT INTO 表名 VALUES (值1，值2...)注意：这种写法的值的顺序和表中列的顺序是一一对应的</code></pre><p>update….</p><p>修改表中指定行的指定列的值</p><pre><code>UPDATE 表名 SET 列名1=值1，列名2=值2 WHERE 条件where后面的条件是过滤条件，过滤的是行也就是通过where后面的条件控制要更新哪些行数据的指定列的值如果没有where条件，就是更新表中所有的行的指定列的值update语句使用的时候一般都是有过滤条件的</code></pre><p>delete…..</p><p>删除表中指定的行</p><pre><code>DELETE FROM 表名 WHERE 条件where后面的条件是过滤条件，过滤的是行只删除满足过滤条件的行如果没有where条件，就是删除表中所有的数据一般情况下delete语句都是有过滤条件的</code></pre><p>删除表中所有的数据：<br>delete from 表名;</p><p>–是直接将表中所有的数据删除，可以回滚事务先把数据放到“回收站”<br>truncate table 表名;–删除表中所有的数据<br>–其实是先将整张表删除 然后有重新创建了一张新的表不会把数据放到“回收站” 不会回滚</p><h2 id="DQL"><a href="#DQL" class="headerlink" title="DQL"></a>DQL</h2><p>（Data Query Language）：数据查询语言，用来查询记录（数据）。</p><p>主要用在对表中数据的查询操作</p><p>select….</p><h2 id="DCL"><a href="#DCL" class="headerlink" title="DCL"></a>DCL</h2><p>（Data Control Language）：数据控制语言，用来定义访问权限和安全级别；</p><p>授权：grant…</p><p>撤销权限：revoke…</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>超文本标记语言</title>
      <link href="2021/03/01/chao-wen-ben-biao-ji-yu-yan-html/"/>
      <url>2021/03/01/chao-wen-ben-biao-ji-yu-yan-html/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>HTML的全称为超文本标记语言，是一种标记语言。它包括一系列标签．通过这些标签可以将网络上的文档格式统一，使分散的Internet资源连接为一个逻辑整体。HTML文本是由HTML命令组成的描述性文本，HTML命令可以说明文字，图形、动画、声音、表格、链接等。</p><pre><code>HTML常用标签1、注释标签    &lt;!-- --&gt;2、字体标签&lt;font&gt;字体大小：size  文本颜色：color 字体：face &lt;/font&gt;&lt;b&gt;文本加粗&lt;i&gt;文本斜体&lt;h1&gt;----&lt;h6&gt;标题 align=&quot;&quot;center居中，left居左，right居右排版标签&lt;br/&gt;换行&lt;p&gt;段落  align&lt;hr/&gt;水平分割线 颜色：color，粗细：size，宽度：width，位置align 图片标签&lt;img&gt;  src:路径  width：宽度height：高度  alt：图片加载失败所显示内容  border：周围边框宽度  hspace：左右空白  vspace：上下空白  align：图像相对周围元素的水平和垂直对齐方式    left：把图像对齐到左边    right：把图像对齐到右边    middle：把图像与中间对齐    top：把图像与顶部对齐    bottom：把图像与底部对齐超链接标签 &lt;a href=&quot;指定要连接的url&quot; target=&quot;打开方式&quot;&gt;&lt;/a&gt; href:绝对url，相对地址 当前页面的锚（@id值） target：_blank  _self(默认)表格标签 table的属性  bgcolor：颜色  background：背景图片  width：表格宽度  height：表格高度  border：表格边框 ****  cellspacing：单元格之间的边距 ****  cellpadding：单元格内容与边缘之间的距离  align：表格的水平位置 **** tr属性  bgcolor，background，height，width th/td属性  bgcolor，background，height，width  align：内容的水平位置  colspan：合并多个列 ****  rowspan：合并多个行 **** &lt;caption&gt;表格标题表单标签 &lt;form&gt; action:提交到的url method：请求方式①get②post  表单中每个输入控件必须要有name属性 单行文本框 text  &lt;input type=&quot;text&quot;/&gt;  value:文本框的值  maxlength：最大长度 密码框 password  &lt;input type=&quot;password&quot;/&gt; 隐藏框 hidden  &lt;input type=&quot;hidden&quot;/&gt; value=&quot;内容&quot; 单选框 radio  &lt;input type=&quot;radio&quot;/&gt;   value:值 **** name:参数名 ****    传参：参数名-name 参数值--value   checked：默认选中 复选框 checkbox  &lt;input type=&quot;checkbox&quot;/&gt;   同一组复选框他们有相同的name值 表单提交按钮 submit  &lt;input type=&quot;submit&quot;/&gt;   请求action中的url并将表单中的数据传过去 重置按钮 reset  &lt;input type=&quot;reset&quot;/&gt;   表单中所有选项都恢复到初始状态 文件按钮 file    &lt;input type=&quot;file&quot;/&gt;     上传文件时使用 普通按钮 button    &lt;input type=button&quot;/&gt; 图片按钮 image    &lt;input type=&quot;image&quot;/&gt; 下拉框   &lt;select&gt;name:参数名，multiple：多选 ****     &lt;option&gt;&lt;/option&gt;value:值，selected：默认选中  &lt;/select&gt; 文本域&lt;textarea&gt;  name:名字--参数名  cols：宽度 rows:高度 区域标签&lt;fieldset&gt;     &lt;legend&gt;区域标签标题&lt;legend&gt;div： &lt;div&gt;是一个块级元素。自动开始新的一行，对网页进行分区span： &lt;span&gt;标签被用来组合文档中的行内元素不会占用一整行，有多少内容就占多大区域</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java 入门</title>
      <link href="2021/02/22/java-ru-men/"/>
      <url>2021/02/22/java-ru-men/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li><p>The abstraction of reality is language，The abstraction of language is the program,The abstraction of the program is mathematical logic,The abstract of mathematical logic is the truth beyond cognition.</p><p>现实的抽象是语言，语言的抽象是程序，程序的抽象是数理逻辑，数理逻辑的抽象是超越认知的真理。</p></li></ul><hr><h1 id="java的历史—了解"><a href="#java的历史—了解" class="headerlink" title="java的历史—了解"></a>java的历史—了解</h1><p>sun—oracle</p><h2 id="java的版本"><a href="#java的版本" class="headerlink" title="java的版本"></a>java的版本</h2><p>​        jdk1.7—jdk7</p><p>​        jdk1.8—jdk8</p><h2 id="java的体系："><a href="#java的体系：" class="headerlink" title="java的体系："></a>java的体系：</h2><p>​        JAVASE<br>​        JAVAEE<br>​        JAVAME</p><h2 id="java的名词"><a href="#java的名词" class="headerlink" title="java的名词:"></a>java的名词:</h2><h3 id="jdk"><a href="#jdk" class="headerlink" title="jdk:"></a>jdk:</h3><p>​            java开发工具包</p><h3 id="jre"><a href="#jre" class="headerlink" title="jre:"></a>jre:</h3><p>​            java运行时环境</p><h3 id="JVM"><a href="#JVM" class="headerlink" title="JVM:"></a>JVM:</h3><p>​            java虚拟机</p><h2 id="安装配置开发环境："><a href="#安装配置开发环境：" class="headerlink" title="安装配置开发环境："></a>安装配置开发环境：</h2><p>​        1.安装jdk<br>​        2.配置环境变量<br>​            JAVA_HOME:jdk安装目录的根目录<br>​            path:%JAVA_HOME%/bin</p><h1 id="java的基本语法："><a href="#java的基本语法：" class="headerlink" title="java的基本语法："></a>java的基本语法：</h1><h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字:"></a>关键字:</h2><p>​        被java赋予特定含义的单词<br>​        关键字在高级的编辑器中会变色<br>​        public     class     static     if     else      switch     case     for     while     true     false</p><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符:"></a>标识符:</h2><p>​        标识java程序中一个特定内容的符号—起的名字<br>​        包名 类名 方法名 变量名 常量名</p><p>​        标识符的命名规则：–合法性</p><p>​            只能由大小写英文字母    数字    下划线    $    不能以数字开头    不能是关键字</p><p>​        规范性：<br>​            见名知意    驼峰命名法    selectStudentByName</p><p>​        常见命名：<br>​            包名：全小写<br>​            类名：<br>​                一个单词：首字母大写<br>​                多个单词：每个单词首字母大写<br>​            变量名和方法名：<br>​                一个单词：全小写<br>​                多个单词：第一个单词全小写，后面每个单词首字母大写</p><h2 id="java的注释："><a href="#java的注释：" class="headerlink" title="java的注释："></a>java的注释：</h2><p>​        注释是对java程序进行解释说明的文字<br>​        单行注释：    //注释的内容<br>​        多行注释：<br>​            /*<br>​            注释的内容<br>​            */<br>​        文档注释：<br>​            /**<br>​            注释的内容<br>​            */</p><h2 id="常量："><a href="#常量：" class="headerlink" title="常量："></a>常量：</h2><p>​        在程序执行过程中值不会发生改变的量<br>​        字面值常量：    1 ‘中’<br>​        自定义常量：    后面面向对象final讲</p><h2 id="java中变量："><a href="#java中变量：" class="headerlink" title="java中变量："></a>java中变量：</h2><p>​        在程序执行过程中值会在一定范围内发生改变的量<br>​        变量的定义：    数据类型 变量名[=初始值];</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>​        基本数据类型——4类8种</p><pre><code>    整数型：        byte     1字节 8位  -128~127        short    2     16   -2^15~2^15-1        int      4     32   -2^31~2^31-1        long     8     64   -2^63~2^63-1        整数型字面值常量默认是int类型        定义long类型的变量的时候需要在值的后面加L    浮点型:        float 单精度浮点型 4字节 32位        double 双精度浮点型 8字节 64位        double的精度要高于float        但是double做运算也是不精确的，如果精度要求很高，建议使用后面学习的BigDecimal        浮点型字面值常量默认是double类型        定义float类型的变量需要加F    字符型:        char 2字节        java中的字符是可以存储中文字符的---Unicode        java中字符都需要使用单引号括起来        &#39;a&#39; &#39;0&#39; &#39;中&#39;    布尔型:        boolean        只有两个值 true false    基本数据类型的类型转换        byte,short,char--int--long--float--double        boolean型是不和其他类型转换    引用数据类型：        除了以上8种基本数据类型之外的其他类型都是引用数据类型        String Scanner 数组</code></pre><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><pre><code>算数运算符        +:            数学加法：两侧都是数字就是做加法            字符串拼接：只要一侧是字符串就是做字符串的拼接        -        *        /        %        ++：变量自增1        --：变量自减1            注意++/--写在变量前和变量后的区别赋值运算符：=    +=    -=    *=    /=    %=        short s=1;        s=s+1;        s+=1;        关系运算符--比较运算符    ==    &gt;    &lt;    &gt;=    &lt;=    !=逻辑运算符            与        &amp;        &amp;&amp;        或        |        ||        非        !        &amp;和&amp;&amp;的区别        |和||的区别三目运算符--三元            表达式1?表达式2:表达式3;位运算符--了解    &lt;&lt;    &gt;&gt;    &gt;&gt;&gt;        &amp;    |    ~    ^</code></pre><h1 id="键盘录入"><a href="#键盘录入" class="headerlink" title="键盘录入"></a>键盘录入</h1><pre><code>    Scanner sc=new Scanner(System.in);    nextInt()    nextDouble()    nextLine()</code></pre><h1 id="语句："><a href="#语句：" class="headerlink" title="语句："></a>语句：</h1><p>顺序语句—-</p><p>分支语句—-if语句</p><pre><code>if结构：    if(条件表达式)&#123;        代码块1    &#125;if-else结构：    if(条件表达式)&#123;        代码块1    &#125;else&#123;        代码块2    &#125;    if-elseif-else:    if(条件1)&#123;        &#125;else if(条件2)&#123;            &#125;else if(条件3)&#123;            &#125;else&#123;            &#125;</code></pre><p>switch语句：    </p><pre><code>switch语句switch(表达式)&#123;//switch的表达式的值的类型只能是 byte short int char 枚举 String    case 值1：......;break;    case 值2：......;break;    case 值3：......;break;    default：......;break;    &#125;</code></pre><p>循环语句</p><pre><code>for循环    for(循环变量初始化;循环条件;循环变量变化)&#123;        循环体    &#125;while循环    while(循环条件)&#123;        循环体    &#125;do-while循环    do&#123;        循环体    &#125;while(循环条件);while和do-while的区别？</code></pre><p>break,continue的区别？</p><pre><code>break可以用在switch语句或者循环中用在switch中，是用来结束整个switch语句用在循环中，是结束整个循环continue用在循环中，作用是结束本次循环，执行下一次循环</code></pre><h1 id="数组："><a href="#数组：" class="headerlink" title="数组："></a>数组：</h1><p>数组就是一个容器，用来存储多个同一类型的数据。</p><p>一维数组    </p><pre><code>定义：        数据类型[] 数组名=new 数据类型[长度];        数据类型[] 数组名=new 数据类型&#123;1,2,3,4&#125;        数据类型[] 数组名=&#123;1,2,3,4&#125;​    操作：​        长度：length​    操作单个元素：下标索引 0---数组名.length-1​    遍历数组：​    内存：    数组是引用数据类型</code></pre><p>二维数组</p><pre><code>数组元素是一维数组的数组定义：    数据类型[][] 数组名=new 数据类型[二维数组的长度][一维数组的长度];    数据类型[][] 数组名=new 数据类型[二维数组的长度][];    数据类型[][] 数组名=new 数据类型[][]&#123;&#123;1,2&#125;,&#123;1,2,3&#125;,&#123;4,5,6&#125;&#125;;    数据类型[][] 数组名=&#123;&#123;1,2&#125;,&#123;1,2,3&#125;,&#123;4,5,6&#125;&#125;;​    操作：​    长度：length---获取的是二维数组中一维数组的个数​    下标        a[m][n]​    遍历二维数组</code></pre><p>简单算法：<br>    冒泡排序<br>    二分查找</p><h1 id="函数："><a href="#函数：" class="headerlink" title="函数："></a>函数：</h1><p>面向对象：<br>    面向过程—专注于每个实现的过程<br>    面向对象—专注于实现这个功能的对象</p><h1 id="对象："><a href="#对象：" class="headerlink" title="对象："></a>对象：</h1><p>万事万物皆对象—-现实生活中每个”具体的事物”都可以认为是一个对象</p><h1 id="类："><a href="#类：" class="headerlink" title="类："></a>类：</h1><p>类是多个具体的事物的共同特征和行为的归纳总结<br>把多个具有共同特征和行为的事物归纳总结出一个类</p><p>学生—类<br>    具体到哪个学生—对象<br>老师—类<br>    具体到哪个老师—对象</p><h2 id="类和对象的关系："><a href="#类和对象的关系：" class="headerlink" title="类和对象的关系："></a>类和对象的关系：</h2><p>​    对象是对类的具体化实现<br>​    类是对对象的抽象化抽取</p><p>现实生活中：是先有对象，然后归纳总结出类</p><p>java中写代码的时候：先有类，再有对象<br>        java中的类就相当于是一个模板，一个图纸<br>        使用类创建对象的过程就相当于按照模板图纸生产具体的东西的过程</p><h2 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h2><p>使用关键字class     </p><p>修饰符 class 类名{<br>    这类事物拥有的共同特征和行为—属性和方法<br>}</p><p>修饰符：</p><pre><code>访问权限修饰符和其他修饰符    常用的：        访问权限修饰符：对于类来说，访问权限修饰符只能是public或者默认不写(default)        public:    公共的  表示这个类可以在任意的地方去使用                默认(default):表示当前类只能在同包中被访问                final                abstract​        目前大家都先使用public即可</code></pre><p>class: 关键字</p><p>类名：    </p><pre><code>符合标识符的命名规则见名知意类名每个单词首字母都大写</code></pre><p>类的成员：</p><pre><code>属性：--成员变量    这类事物拥有的共同的特征---一般是名词    在类中定义哪些属性？项目中用到哪些就定义哪些，用不到的不用管            属性定义语法：    修饰符 数据类型 属性名[=初始值];    (修饰符：    访问权限修饰符和其他修饰符----目前先使用public数据类型：    具体的属性值的数据类型    可以是基本数据类型也可以是引用数据类型属性名：    符合标识符的命名规则即可----见名之意         一个单词：全小写        多个单词：第一个全小写，后面每个首字母大写)</code></pre><pre><code>方法：---函数    这类事物拥有的共同的行为---一般是动词---可以干什么定义语法：    修饰符 返回值类型 方法名(参数列表)&#123;        实现这个行为的代码    &#125;(修饰符：    访问权限修饰符和其他修饰符---目前都用public返回值类型：    返回值的数据类型    返回值：调用方法后方法反馈给调用者的数据        1.方法可以有返回值也可以没有，具体问题具体分析        2.有返回值的方法，在方法中必须使用return将返回值返回        3.没有返回值的方法，返回值类型写void方法名：    符合标识符的命名规则即可----见名之意        一个单词：全小写        多个单词：第一个全小写，后面每个首字母大写参数列表：    当调用方法的时候需要给方法传入的参数    参数列表：        (数据类型 参数名,数据类型 参数名)</code></pre><h1 id="类的实例化："><a href="#类的实例化：" class="headerlink" title="类的实例化："></a>类的实例化：</h1><p>类的实例化就是创建类的对象的过程<br>    类名 对象名=new 类名();—–对象名又叫对象引用</p><p>对象成员的调用：    </p><p>​        成员变量–属性：<br>​            对象名.属性名—获取指定对象的指定属性值<br>​            对象名.属性名=值—–给指定对象的指定属性赋值</p><p>对于成员变量也就是属性，当我们没有给对象的属性赋值的时候是有默认值的<br>        整数型—0<br>        浮点型—0.0<br>        字符型—空字符<br>        布尔型—false<br>        引用数据类型—null</p><p>成员方法<br>        对象名.方法名(参数值)</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2020/01/01/helloworld/"/>
      <url>2020/01/01/helloworld/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
